name: Java CI with Gradle

# 워크플로우 실행 조건
on:
  pull_request:
    branches:
      - develop
  push:
    branches:
      - featureGitAction-cicd-구현

# 워크플로우 작업 정의
jobs:
  build:
    name: Build and Test
    runs-on: ubuntu-latest

    steps:
      # 1. 코드 체크아웃
      - name: Checkout Code
        uses: actions/checkout@v3

      # 2. JDK 설정
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: gradle

      # 3. Gradle 실행 권한 부여
      - name: Grant execute permission for Gradle
        run: chmod +x ./gradlew

      # 4. Gradle 빌드 및 테스트
      - name: create env
        run: echo "${{ secrets.ENV }}" >> .env

      - name: Build and Test with Gradle
        run: ./gradlew bootJar
              # Docker Image 빌드
      - name: Build the Docker image
        run: docker build . --file Dockerfile --tag ${{ secrets.DOCKERHUB_USERNAME }}/revibe:latest

       # Docker 로큰
      - name: Login to Docker Hub using Access Token
        run: echo "${{ secrets.DOCKERHUB_TOKEN }}" | docker login -u ${{ secrets.DOCKERHUB_USERNAME }} --password-stdin

      # 이미지 푸시
      - name: Push the Docker image
        run: docker push ${{ secrets.DOCKERHUB_USERNAME }}/revibe:latest

#
#      - name: Set up QEMU
#        uses: docker/setup-qemu-action@v3
#
#      - name: Login to Docker Hub
#        uses: docker/login-action@v3
#        with:
#          username: ${{ secrets.DOCKERHUB_USERNAME }}
#          password: ${{ secrets.DOCKER_TOKEN }}
#
#      - name: Set up Docker Buildx
#        uses: docker/setup-buildx-action@v3
#
#
#      - name: Build and push
#        uses: docker/build-push-action@v6
#        with:
#         context: .
#         file: ./Dockerfile
#         push: true
#         tags: ${{ secrets.DOCKERHUB_USERNAME }}/${{ env.DOCKER_IMAGE_TAG_NAME}}:latest

      # 5. 도커 이미지 빌드 및 푸시
#      - name: Docker Build and Push
#        env:
#          DOCKER_USER: ${{ secrets.DOCKER_USERNAME }}
#          DOCKER_PASS: ${{ secrets.DOCKER_PASSWORD }}
#          DATABASE_URL: ${{ secrets.DATABASE_URL }}
#          DATABASE_ID: ${{ secrets.DATABASE_ID }}
#          DATABASE_PASSWORD: ${{ secrets.DATABASE_PASSWORD }}
#          DOCKER_HUB_REPOSITORY: ${{ secrets.DOCKER_HUB_REPOSITORY }}
#        run: |
#          echo "$DOCKER_PASS" | docker login -u "$DOCKER_USER" --password-stdin
#
#          if [ "${{ github.base_ref }}" = "featureGitAction-cicd-구현" ]; then
#            DOCKER_TAG="featureGitAction-cicd-구현"
#          fi
#
#          docker build \
#            --build-arg DATABASE_URL="$DATABASE_URL" \
#            --build-arg DATABASE_ID="$DATABASE_ID" \
#            --build-arg DATABASE_PASSWORD="$DATABASE_PASSWORD" \
#            -t "$DOCKER_HUB_REPOSITORY:$DOCKER_TAG" .
#          docker push "$DOCKER_HUB_REPOSITORY:$DOCKER_TAG"
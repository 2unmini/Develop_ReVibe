name: docker-multi-stage build

# 워크플로우 실행 조건
on:
  pull_request:
    branches:
      - develop
  push:
    branches:
      - featureGitAction-cicd-구현

# 워크플로우 작업 정의
jobs:
  docker-build-and-push:
    name: Build and Test
    runs-on: ubuntu-latest

    steps:
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ vars.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKER_TOKEN }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and push
        uses: docker/build-push-action@v6
        with:
          file: ./Dockerfile
          push: true
          tags: ${{ vars.DOCKERHUB_USERNAME }}/${{ vars.DOCKER_IMAGE_TAG_NAME}}:latest

  deploy-to-ec2:
    needs: docker-build-and-push
    runs-on: ubuntu-latest
    # https://github.com/marketplace/actions/ssh-remote-commands
    steps:
      - name: Deploy to EC2
        uses: appleboy/ssh-action@v1.2.0
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_KEY }}
          script: |
            CONTAINER_ID=$(sudo docker ps -q --filter "publish=8080-8080")
            if [ ! -z "$CONTAINER_ID" ]; then
            sudo docker stop $CONTAINER_ID
            sudo docker rm $CONTAINER_ID
            fi
            # 기존 .env 파일 삭제 후 새로 생성
            rm -f .env
            echo "SPRING_DATASOURCE_URL=${{ secrets.DB_URL }}" >> .env
            echo "SPRING_DATASOURCE_USERNAME=${{ secrets.DB_USERNAME }}" >> .env
            echo "SPRING_DATASOURCE_PASSWORD=${{ secrets.DB_PASSWORD }}" >> .env
            echo "TOSS_CLIENT_KEY=${{ secrets.TOSS_CLIENT_KEY }}" >> .env
            echo "TOSS_SECRET_KEY=${{ secrets.TOSS_SECRET_KEY }}" >> .env
            echo "S3_ACCESS_KEY=${{ secrets.AWS_ACCESS_KEY }}" >> .env
            echo "S3_SECRET_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }}" >> .env
            echo "S3_BUCKET_NAME=${{ secrets.S3_BUCKET_NAME }}" >> .env
            echo "JWT_SECRET_KEY=${{ secrets.JWT_TOKEN }}" >> .env
            
            sudo docker pull ${{ vars.DOCKERHUB_USERNAME }}/${{ vars.DOCKER_IMAGE_TAG_NAME }}:latest
            sudo docker run -d -p 8080:8080 \
              --env-file .env \
            ${{ vars.DOCKERHUB_USERNAME }}/${{ vars.DOCKER_IMAGE_TAG_NAME }}:latest